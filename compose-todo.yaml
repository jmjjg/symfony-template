# @fixme: doesn't start (postgresql)
x-common: &x-common
  build:
      args:
        - TZ=${TZ:-Europe/Paris}
      context: .
  environment:
    TZ: ${TZ:-Europe/Paris}
  networks:
      - symfony
  restart: unless-stopped

x-php-common: &x-php-common
  <<: *x-common
  build:
      args:
          - PHP_UID=${PHP_UID:-1000}
          - PHP_GID=${PHP_GID:-1000}
      dockerfile: docker/php/Dockerfile
  environment:
    DB_URL: ${DB_URL}

services:
    nginx:
        <<: *x-common
        build:
            args:
                - NGINX_UID=${NGINX_UID:-1000}
                - NGINX_GID=${NGINX_GID:-1000}
            dockerfile: docker/nginx/Dockerfile
        container_name: nginx
        depends_on:
            - php-fpm
            - postgresql
        ports:
            - "${FORWARD_NGINX_PORT:-80}:80"

    # ofelia:
    #     <<: *x-common
    #     build:
    #         dockerfile: docker/ofelia/Dockerfile
    #     container_name: ofelia
    #     depends_on:
    #         - nginx
    #         - php-fpm
    #         - postgresql
    #     volumes:
    #         - /var/run/docker.sock:/var/run/docker.sock:ro

    php-cli:
        <<: *x-php-common
        build:
            target: php-cli
        container_name: php-cli
        restart: no
        scale: 0

    # php-cron:
    #     <<: *x-php-common
    #     build:
    #         target: php-cron
    #     container_name: php-cron
    #     #scale: 0 # @fixme

    php-fpm:
        <<: *x-php-common
        build:
            target: php-fpm
        container_name: php-fpm
        ports:
            - "${FORWARD_PHP_PORT:-9000}:9000"

    php-supervisor:
        <<: *x-php-common
        build:
            target: php-supervisor
        container_name: php-supervisor
        ports:
          - "${FORWARD_SUPERVISORCTL_PORT:-9001}:9001"

    postgresql:
        <<: *x-common
        build:
            dockerfile: docker/postgresql/Dockerfile
        container_name: postgresql
        environment:
          POSTGRES_DB: ${DB_DATABASE}
          POSTGRES_USER: ${DB_USERNAME}
          POSTGRES_PASSWORD: ${DB_PASSWORD}
          PGDATA: /data/postgres
        healthcheck:
          test: [ "CMD-SHELL", "pg_isready -d ${DB_DATABASE} -U ${DB_USERNAME}" ]
          interval: 5s
          timeout: 5s
          retries: 5
        ports:
          - "${FORWARD_DB_PORT:-5432}:5432"
        volumes:
          - ./data/postgresql/postgres:/data/postgres

volumes:
  postgresql:
    driver: local

networks:
    symfony:
        driver: bridge
